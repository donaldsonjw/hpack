(module hpack/static-table
   (library hoard)
   (export (static-table-search header)
           (static-table-length)
           (static-table-ref index)))


(define +static-table+
   '#((":authority" "")	
      (":method" "GET" )	
      (":method" "POST")	
      (":path" "/")	
      (":path" "/index.html")	
      (":scheme" "http")	
      (":scheme" "https")	
      (":status" "200")	
      (":status" "204")	
      (":status" "206")	
      (":status" "304")	
      (":status" "400")	
      (":status" "404")	
      (":status" "500")	
      ("accept-charset" "")	
      ("accept-encoding" "gzip, deflate")	
      ("accept-language" "")	
      ("accept-ranges" "")	
      ("accept" "")	
      ("access-control-allow-origin" "")	
      ("age" "")	
      ("allow" "")	
      ("authorization" "")	
      ("cache-control" "")	
      ("content-disposition" "")	
      ("content-encoding" "")	
      ("content-language" "")	
      ("content-length" "")	
      ("content-location" "")	
      ("content-range" "")	
      ("content-type" "")	
      ("cookie" "")	
      ("date" "")	
      ("etag" "") 	
      ("expect" "")	
      ("expires" "")	
      ("from" "")	
      ("host" "")	
      ("if-match" "")	
      ("if-modified-since" "")	
      ("if-none-match" "")	
      ("if-range" "")	
      ("if-unmodified-since" "")	
      ("last-modified" "")	
      ("link" "")	
      ("location" "")	
      ("max-forwards" "")	
      ("proxy-authenticate" "")	
      ("proxy-authorization" "")	
      ("range" "")	
      ("referer" "")	
      ("refresh" "")	
      ("retry-after" "")	
      ("server" "")	
      ("set-cookie" "")	
      ("strict-transport-security" "")	
      ("transfer-encoding" "")	
      ("user-agent" "")	
      ("vary" "")	
      ("via" "")	
      ("www-authenticate" "")))

(define (static-table-search-old header)
   (bind-exit (return)
      (dictionary-enumerable-for-each
         (lambda (i e)
            (if (string=? (car header) (car e))
                (return (list (if (and (= (length e) 2) (string=? (cadr header) (cadr e)))
                                  'full
                                  'partial)
                           (+ i 1))))) +static-table+)
      #f))

(define (static-table-search header)
   (let ((candidates
            (dictionary-enumerable-collect
               (dictionary-enumerable-map (lambda (index candidate)
                                             (if (and (= (length candidate) 2)
                                                      (string=? (cadr header)
                                                         (cadr candidate)))
                                                 (=> (+ index 1) 'full)
                                                 (=> (+ index 1) 'partial)))
                  (dictionary-enumerable-filter (lambda (index candidate)
                                                   (string=? (car header) (car candidate)))
                     +static-table+))
               +list-collector+)))
      (let ((full-match (find (lambda (assoc) (eq? (=>value assoc) 'full))
                           candidates)))
         (cond (full-match
                (list 'full (=>key full-match)))
               ((pair? candidates)
                (list 'partial (=>key (car candidates))))
               (else
                #f)))))

(define (static-table-length)
   (vector-length +static-table+))

(define (static-table-ref index)
   (vector-ref +static-table+ (- index 1)))

